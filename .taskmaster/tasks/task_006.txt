# Task ID: 6
# Title: Lunr.js를 사용한 클라이언트 측 검색 구현
# Status: pending
# Dependencies: 3
# Priority: medium
# Description: 키워드를 사용하여 게시물을 찾는 기능을 만듭니다. Lunr.js를 사용하여 클라이언트 측 인덱싱 및 검색을 합니다.
# Details:
1. Lunr.js 설치:
```bash
npm install lunr
```
2. `/scripts/generate-search-index.js`에서 다음을 수행하는 빌드 스크립트 만들기
   - 모든 MDX 파일 읽기
   - 컨텐츠 및 메타데이터 추출
   - Lunr.js 검색 인덱스 만들기
   - 인덱스를 `/public/data/lunr-index.json`에 저장
3. package.json의 prebuild 후크에 이 스크립트 추가
4. `/components/search-bar.tsx`에 SearchBar 구성 요소를 만듭니다.
   - 검색 아이콘이 있는 입력 필드
   - 드롭다운 결과 패널
   - 키보드 탐색 지원
5. `/hooks/use-search.ts`에서 검색 기능을 구현합니다.
```typescript
export function useSearch() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [index, setIndex] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    // 컴포넌트 마운트 시 검색 인덱스 로드
    async function loadSearchIndex() {
      setIsLoading(true);
      try {
        const response = await fetch('/data/lunr-index.json');
        const data = await response.json();
        setIndex(lunr.Index.load(data.index));
      } catch (error) {
        console.error('검색 인덱스 로드 실패:', error);
      } finally {
        setIsLoading(false);
      }
    }
    
    loadSearchIndex();
  }, []);

  useEffect(() => {
    if (!index || !query.trim()) {
      setResults([]);
      return;
    }
    
    try {
      const searchResults = index.search(query);
      // 검색 결과를 실제 게시물 데이터에 매핑
      // ...
      setResults(mappedResults);
    } catch (error) {
      console.error('검색 오류:', error);
      setResults([]);
    }
  }, [query, index]);

  return { query, setQuery, results, isLoading };
}
```
6. 사이트 헤더에 SearchBar 추가
7. `/app/search/page.tsx`에서 검색 결과 페이지 추가

# Test Strategy:
1. 검색 인덱스 생성을 다양한 게시물 컨텐츠와 테스트
2. 브라우저에서 검색 인덱스가 정상적으로 로드되는지 확인
3. 다양한 쿼리(정확한 일치, 부분 일치, 대소문자 구분)를 사용하여 검색 기능 테스트
4. SearchBar 구성 요소 UI 및 키보드 탐색 테스트
5. 검색 결과가 관련성이 있고 적절하게 순위가 매겨지는지 확인
6. 많은 게시물이 있는 경우 성능 테스트
7. 인덱스 로드 실패에 대한 오류 처리 테스트

# Subtasks:
## 1. 빌드 시간에 Lunr.js 검색 인덱스 생성 [pending]
### Dependencies: None
### Description: 크롤링 또는 사이트 컨텐츠를 프로세스하여 검색 가능한 데이터(예: 제목, URL, 요약)를 추출하고 Lunr.js 호환 JSON 인덱스 파일을 생성하는 빌드 스크립트를 만듭니다. 스크립트가 대규모 데이터 세트를 효율적으로 처리하고 인덱스와 메타데이터 저장소를 출력할 수 있는지 확인합니다.
### Details:
Node.js 또는 유사한 환경을 사용하여 컨텐츠를 Lunr.js 인덱스와 저장소로 자동화된 추출 및 변환 프로세스를 통해 저장합니다. 결과 JSON 파일을 사이트와 함께 정적으로 제공합니다.

## 2. SearchBar 구성 요소 키보드 탐색 구현 [pending]
### Dependencies: 6.1
### Description: 사용자 쿼리를 캡처하고 키보드 탐색(예: 화살표 키, 엔터로 제출)을 지원하고 검색 작업을 트리거하는 재사용 가능한 SearchBar UI 구성 요소를 개발합니다. 접근성 및 반응형 디자인을 보장합니다.
### Details:
SearchBar는 입력을 디보우하고 포커스/블러 이벤트를 처리하고 활성 선택에 대한 시각적 피드백을 제공해야 합니다. 검색 후크와 실시간 결과를 통합합니다.

## 3. 고급 Lunr.js 쿼리 구문 및 결과 반환을 위한 검색 후크 개발 [pending]
### Dependencies: 6.1, 6.2
### Description: 비동기적으로 Lunr.js 인덱스와 저장 JSON 파일을 로드하고 로드/오류 상태를 관리하고 주어진 쿼리에 대한 관련 결과를 반환하는 사용자 지정 React 후크(또는 등가)를 개발합니다.
### Details:
후크는 비동기 가져오기, 인덱스 역직렬화 및 효율적인 쿼리를 처리해야 합니다. 고급 Lunr.js 쿼리 구문을 지원해야 하며 저장에서 연관된 메타데이터를 반환해야 합니다.

## 4. 관련성 및 성능 최적화를 위한 검색 결과 페이지 디자인 및 구현 [pending]
### Dependencies: 6.1, 6.2, 6.3
### Description: 검색 후크에서 결과를 표시하는 검색 결과 페이지를 디자인하고 구현합니다. 관련성에 따라 결과를 정렬하고 대규모 결과 집합에 대한 빠른 렌더링, 페이지네이션 또는 무한 스크롤을 제공하고 컨텍스트에서 일치하는 용어를 강조합니다.
### Details:
페이지는 제목, 스니펫, 각 결과에 대한 링크를 표시해야 하며 빈 상태를 적절하게 처리하고 사이트로 명확한 탐색을 제공해야 합니다. 성능과 사용자 경험을 최적화합니다.

