# Task ID: 3
# Title: 빌드 시간에 게시물 메타데이터 JSON 생성
# Status: pending
# Dependencies: 2
# Priority: high
# Description: 게시물 디렉토리를 순회하고 모든 MDX 파일에서 메타데이터를 추출하고 게시물 목록 및 필터링에 사용할 구조화된 posts.json 파일을 생성하는 빌드 스크립트를 만듭니다.
# Details:
1. `/scripts/generate-posts-data.js`에서 다음을 수행하는 Node.js 스크립트 만들기
   - 재귀적으로 `/posts` 디렉토리 순회
   - 모든 index.mdx 파일 식별
   - gray-matter를 사용하여 메타데이터 추출
   - 카테고리별로 게시물 정렬
   - 날짜(최신순)으로 게시물 정렬
   - `/public/data/posts.json`에 구조화된 posts.json 파일 출력
2. posts.json 구조는 PRD에서 지정한 형식을 따라야 합니다.
```json
{
  "[categoryName]": [
    {
      "key": "...",
      "title": "...",
      "date": "...",
      "tags": ["..."],
      "category": "...",
      "summary": "..."
    }
  ]
}
```
3. package.json의 prebuild 후크를 추가하여 이 스크립트를 실행합니다.
```json
"scripts": {
  "prebuild": "node scripts/generate-posts-data.js",
  ...
}
```
4. 변경된 파일만 처리하는 더 빠른 증분 빌드를 위해 캐싱을 구현합니다

# Test Strategy:
1. 메타데이터 추출 함수에 대한 유닛 테스트 작성
2. 다양한 게시물 구조와 올바른 JSON 출력을 확인하는 테스트 픽스처 만들기
3. 스크립트를 에지 사례와 함께 테스트합니다.
   - 빈 게시물 디렉토리
   - 필요한 프론트매터 필드 누락
   - 메타데이터에 특수 문자
   - 매우 많은 게시물 수
4. JSON 출력이 유효하고 예상된 구조를 따르는지 확인
5. 변경되지 않은 파일에 대한 증분 빌드 기능을 테스트합니다

# Subtasks:
## 1. 디렉토리 순회 논리 구현 [pending]
### Dependencies: None
### Description: 재귀적으로 게시물 디렉토리를 순회하는 논리를 개발합니다. 필요한 경우 중첩된 디렉토리를 처리하고 게시물 파일이 아닌 경우 필터링합니다.
### Details:
Node.js 파일 시스템 API를 사용하여 디렉토리 구조를 걷습니다. 모든 게시물 파일에 대한 파일 경로를 수집하고 필요한 경우 다양한 파일 확장자를 지원합니다. 심볼릭 링크, 숨겨진 파일 또는 권한 오류와 같은 에지 사례를 처리합니다.

## 2. 게시물에서 메타데이터 추출 및 유효성 검사 [pending]
### Dependencies: 3.1
### Description: 각 게시물 파일에서 필요한 메타데이터 필드(예: 제목, 날짜, 태그)를 추출하고 필요한 스키마에 따라 유효성을 검사합니다. 누락되거나 오류가 있는 메타데이터에 대한 로그 또는 보고서를 작성하고 완전하지 않은 메타데이터에 대한 폴백 동작을 결정합니다.
### Details:
각 파일에서 frontmatter 또는 기타 메타데이터 형식을 구문 분석합니다. 스키마를 사용하여 필드를 유효성 검사합니다(예: JSON 스키마 유효성 검사기 사용). 유효성 검사 오류를 로그하거나 완전하지 않은 메타데이터에 대한 폴백 동작을 결정합니다.

## 3. 빌드 프로세스에 메타데이터 생성 통합 [pending]
### Dependencies: 3.2
### Description: 메타데이터 추출 논리를 빌드 프로세스에 통합하여 빌드 시간에 메타데이터 JSON을 생성합니다. 변경되지 않은 파일에 대한 중복 작업을 방지하는 캐싱 메커니즘을 구현합니다. 증분 빌드를 지원합니다.
### Details:
빌드 파이프라인(예: 데이터 로더 또는 빌드 스크립트)에 메타데이터 생성을 통합합니다. 파일 수정 시간 또는 해시를 저장하고 비교하여 재생성이 필요한지 결정합니다. 최종 메타데이터를 JSON 파일로 출력하여 애플리케이션에서 사용합니다.

