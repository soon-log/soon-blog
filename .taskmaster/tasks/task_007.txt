# Task ID: 7
# Title: 어두운/밝은 모드 토글 구현
# Status: pending
# Dependencies: 1
# Priority: low
# Description: 사용자 시스템 선호도를 조정하고 어두운 및 밝은 모드 간에 수동으로 전환할 수 있는 테마 전환 기능을 추가합니다.
# Details:
1. React Context를 사용하여 `/components/theme-provider.tsx`에 ThemeProvider 구성 요소 만들기
```typescript
const ThemeContext = createContext({
  theme: 'light',
  setTheme: (theme: 'light' | 'dark' | 'system') => {}
});

export function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('system');
  
  useEffect(() => {
    // 저장된 선호도 확인
    const storedTheme = localStorage.getItem('theme');
    if (storedTheme) {
      setTheme(storedTheme);
    }
  }, []);
  
  useEffect(() => {
    // 테마를 문서에 적용
    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      document.documentElement.classList.toggle('dark', systemTheme === 'dark');
    } else {
      document.documentElement.classList.toggle('dark', theme === 'dark');
    }
    
    // 선호도 저장
    localStorage.setItem('theme', theme);
  }, [theme]);
  
  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}
```
2. `/components/theme-toggle.tsx`에 ThemeToggle 구성 요소 만들기
3. tailwind.config.js에서 어두운 모드를 위해 Tailwind CSS 설정:
```javascript
module.exports = {
  darkMode: 'class',
  // ...
}
```
4. 모든 UI 구성 요소에 어두운 모드 변형 추가
5. 사이트 헤더에 ThemeToggle 추가
6. 시스템 선호도 감지 및 동기화 구현

# Test Strategy:
1. ThemeProvider를 다양한 초기 상태로 테스트
2. 테마 토글이 모드를 정확하게 전환하는지 확인
3. 미디어 쿼리를 모의하여 시스템 선호도 감지 테스트
4. 저장된 선호도가 localStorage에 지속되는지 확인
5. 모든 UI 구성 요소가 어두운 모드 스타일을 정확하게 적용하는지 확인
6. 다양한 저장된 선호도를 사용하여 초기 로드 동작 테스트
