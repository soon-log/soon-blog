# Overview  
soon-log는 MDX 파일 기반의 개인 개발 블로그입니다. posts 폴더 내 MDX 파일들을 읽어들여 정적 블로그를 생성합니다. 깔끔한 UI와 강력한 검색/필터링 기능을 통해 사용자가 원하는 콘텐츠를 빠르게 찾을 수 있으며, SEO 최적화와 반응형 디자인으로 다양한 환경에서 일관된 사용자 경험을 제공합니다.

# Core Features  

## MDX 기반 콘텐츠 관리
- posts 폴더 구조를 통한 직관적인 파일 관리
- YAML 메타데이터와 마크다운 콘텐츠 분리
- 빌드 타임에 메타데이터 자동 수집 및 JSON 생성
- 개발자 친화적인 콘텐츠 작성 환경 제공

## 카테고리 기반 분류 시스템
- 메타데이터 기반 자동 카테고리 분류
- 데스크톱: 좌측 사이드바 메뉴
- 모바일: 햄버거 메뉴 Drawer 형태
- 카테고리별 글 목록 필터링 (?category= 쿼리스트링)

## 검색 및 필터링 기능
- 제목, 태그, 요약 내용 기반 통합 검색 (?search= 쿼리스트링)
- 태그별 필터링 (?tags= 쿼리스트링)
- 작성일 기반 필터링 (?date= 쿼리스트링)
- 다중 필터 조합 지원 (카테고리 + 태그/날짜)

## 무한 스크롤 글 목록
- 작성일 내림차순 정렬
- 동적 콘텐츠 로딩으로 성능 최적화
- 썸네일 이미지 자동 감지 및 fallback 처리
- 글 제목, 작성일, 요약, 태그 표시

## 반응형 상세 페이지
- MDX를 HTML로 변환하여 렌더링
- 구문 강조가 적용된 코드 블록
- SEO 최적화된 메타 태그
- RSS 피드 생성 지원

## 사용자 경험 최적화
- 시스템 설정 기반 다크/라이트 모드
- 깔끔하고 미니멀한 UI 디자인
- 모바일/데스크톱 호환 반응형 레이아웃
- 빠른 페이지 로드를 위한 SSG/SSR

# User Experience  

## 사용자 페르소나
- 주요 대상: 개발자, 기술 블로그 독자
- 니즈: 기술 정보 탐색, 학습 자료 검색, 개발 트렌드 파악

## 핵심 사용자 플로우

### 1. 블로그 탐색 플로우
1. soon-log 접속 → 메인 페이지 전체 글 목록 확인
2. 무한 스크롤로 추가 글 로드
3. 태그/작성일 필터링으로 원하는 글 탐색
4. 개별 글 클릭 → 상세 페이지(/post/[key]) 이동

### 2. 카테고리별 탐색 플로우
1. 사이드바 메뉴(데스크톱) 또는 햄버거 메뉴(모바일) 클릭
2. 해당 카테고리의 글 목록 확인
3. 태그/작성일 필터링으로 원하는 글 탐색
4. 개별 글 상세 페이지로 이동

## UI/UX 고려사항
- 심플한 디자인: 깔끔하고 미니멀한 UI로 콘텐츠에 집중
- 정적 사이트 생성(SSG) 또는 서버 사이드 렌더링(SSR)으로 빠른 페이지 로드 보장
- 다양한 디바이스에서 일관된 사용자 경험 보장
- 시인성 좋은 타이포그래피와 적절한 여백 활용

# Technical Architecture  

## 시스템 컴포넌트
- Next.js 기반 React 애플리케이션
- MDX 파서 및 변환기
- 빌드 타임 메타데이터 수집기
- 반응형 UI 컴포넌트 라이브러리

## 데이터 모델

### MDX 파일 구조
```
posts/
├── [글제목]/
│   ├── assets/
│   │   ├── thumbnail.(jpg|png|webp) (선택사항)
│   │   └── [기타이미지]
│   └── index.mdx
```

### 메타데이터 스키마
```yaml
key: string (폴더명, URL path)
title: string (글 제목)
date: string (YYYY-MM-DD 형식)
tags: string[] (태그 배열)
category: string (카테고리)
summary: string (요약 내용)
```

### 생성된 JSON 구조
```json
{
  "[카테고리명]": [
    {
      "key": "string",
      "title": "string", 
      "date": "string",
      "tags": ["string"],
      "category": "string",
      "summary": "string"
    }
  ]
}
```

## API 및 통합
- 빌드 타임 파일 시스템 API 활용
- RSS 피드 XML 생성
- 검색 인덱싱을 위한 메타데이터 처리
- 이미지 최적화 및 썸네일 처리

## 인프라 요구사항
- Node.js 런타임 환경
- 정적 파일 호스팅 (Vercel, Netlify 등)
- CDN 지원 (이미지 및 정적 자산)
- SEO를 위한 서버 사이드 렌더링 지원

# Development Roadmap  

## Phase 1: MVP 핵심 기능
### 기본 블로그 시스템
- Next.js 프로젝트 셋업 및 기본 구조 생성
- MDX 파서 설정 및 기본 렌더링 구현
- 메타데이터 수집 스크립트 개발
- 홈페이지 글 목록 표시 기능
- 상세 페이지 렌더링 기능

### 기본 UI/UX
- 반응형 레이아웃 구현
- 헤더 컴포넌트 (로고, 검색바, 다크모드 토글)
- 글 카드 컴포넌트 설계
- 기본 스타일링 및 타이포그래피

## Phase 2: 검색 및 필터링
### 검색 기능
- 통합 검색 시스템 구현
- 쿼리스트링 기반 상태 관리
- 검색 결과 하이라이팅

### 필터링 시스템
- 카테고리별 필터링
- 태그별 필터링  
- 날짜별 필터링
- 다중 필터 조합 로직

## Phase 3: 고급 기능 및 최적화
### 무한 스크롤
- 페이지네이션 로직 구현
- 성능 최적화된 리스트 렌더링
- 로딩 상태 관리

### 카테고리 네비게이션
- 사이드바 메뉴 구현
- 모바일 Drawer 컴포넌트
- 카테고리 동적 생성 로직

### 썸네일 시스템
- 이미지 자동 감지 로직
- 썸네일 최적화 및 fallback 처리
- 이미지 레이지 로딩

## Phase 4: SEO 및 성능 최적화
### SEO 최적화
- 메타 태그 동적 생성
- Open Graph 태그 구현
- 구조화된 데이터 마크업
- RSS 피드 생성

### 성능 최적화
- 코드 스플리팅 및 번들 최적화
- 이미지 최적화 파이프라인
- 캐싱 전략 구현
- Core Web Vitals 최적화

# Logical Dependency Chain

## Foundation Layer (Phase 1)
1. **프로젝트 초기 설정**
   - Next.js 프로젝트 생성 및 TypeScript 설정
   - 필수 패키지 설치 (MDX 관련, 스타일링)
   - 기본 폴더 구조 및 설정 파일

2. **MDX 처리 시스템**
   - MDX 파서 및 변환기 구현
   - 메타데이터 추출 로직
   - 파일 시스템 기반 라우팅

3. **기본 페이지 구조**
   - 레이아웃 컴포넌트
   - 홈페이지 (글 목록)
   - 상세 페이지 템플릿

## Core Features Layer (Phase 2)
4. **검색 시스템**
   - 메타데이터 인덱싱
   - 검색 알고리즘 구현
   - 결과 표시 UI

5. **필터링 시스템**
   - 카테고리/태그/날짜 필터 로직
   - URL 상태 관리
   - 필터 UI 컴포넌트

## Enhanced UX Layer (Phase 3)
6. **네비게이션 시스템**
   - 사이드바 및 모바일 메뉴
   - 카테고리 동적 생성

7. **성능 최적화 기능**
   - 무한 스크롤
   - 이미지 최적화

## Polish Layer (Phase 4)
8. **SEO 및 접근성**
   - 메타 태그 시스템
   - RSS 피드
   - 성능 최적화

# Risks and Mitigations  

## 기술적 도전과제

### MDX 파싱 복잡성
- **위험**: MDX 파일 파싱 중 메타데이터 추출 오류
- **완화**: 철저한 파일 검증 로직과 에러 핸들링 구현

### 성능 이슈
- **위험**: 글이 많아질수록 초기 로딩 시간 증가
- **완화**: 무한 스크롤, 이미지 레이지 로딩, 코드 스플리팅 적용

### 검색 기능 정확도
- **위험**: 단순 문자열 매칭으로 인한 검색 결과 부정확성  
- **완화**: 가중치 기반 검색 알고리즘 도입, 검색어 하이라이팅

## MVP 구성 전략

### 핵심 기능 우선순위
- **위험**: 기능 범위 확장으로 인한 개발 지연
- **완화**: 단계별 개발 로드맵 준수, 핵심 기능 먼저 완성

### 사용자 경험 일관성
- **위험**: 다양한 디바이스에서 일관되지 않은 UX
- **완화**: 모바일 퍼스트 접근법, 체계적인 반응형 디자인

## 리소스 제약사항

### 개발 시간 관리
- **위험**: 완벽주의로 인한 개발 지연
- **완화**: MVP 기능 정의 명확화, 반복적 개선 접근법

### 콘텐츠 관리 복잡성
- **위험**: MDX 파일 작성 및 관리의 복잡성
- **완화**: 명확한 파일 구조 가이드라인, 예제 템플릿 제공

# Appendix  

## 기술 스택
- **Frontend**: Next.js, React, TypeScript
- **Styling**: Tailwind CSS
- **MDX Processing**: @next/mdx
- **Testing**: Jest, React Testing Library
- **Deployment**: Vercel

## 파일 구조 예시
```
src/
├── app/
│   ├── page.tsx (홈페이지)
│   ├── post/
│   │   └── [key]/
│   │       └── page.tsx (상세페이지)
│   └── layout.tsx
├── components/
│   ├── ui/ (공통 UI 컴포넌트)
│   ├── Header.tsx
│   ├── PostCard.tsx
│   ├── Sidebar.tsx
│   └── SearchBar.tsx
├── lib/
│   ├── mdx.ts (MDX 처리 유틸)
│   ├── metadata.ts (메타데이터 수집)
│   └── search.ts (검색 로직)
└── types/
    └── post.ts (타입 정의)
```

## 테스팅 전략
- **방법론**: TDD (Red-Green-Refactor 사이클)
- **목표**: 코드 커버리지 80% 이상
- **자동화**: GitHub Actions를 통한 CI/CD
- **테스트 범위**: 컴포넌트 단위, 유틸 함수, API 엔드포인트

## 메타데이터 예시
```yaml
---
key: good-teammate
title: '함께 일하고 싶은 동료'
date: 2025-01-27
tags: ['팀워크', '협업', '개발문화', '자동화', '문서화']
category: '기타'
summary: '주변 사람들이 일에 몰입할 수 있도록 좋은 환경으로 지속적으로 개선하는 사람에 대한 생각을 정리했습니다.'
---
```
