# Overview  
soon-log는 최신 기술 스택을 활용하여 개발 지식과 경험을 공유하는 개인 기술 블로그입니다. 이 프로젝트는 마크다운(MDX) 파일 기반의 정적 사이트 생성(SSG) 방식을 통해 개발자(저자)에게는 효율적인 콘텐츠 관리 경험을, 독자에게는 빠르고 쾌적한 탐색 경험을 제공하는 것을 목표로 합니다. 복잡한 데이터베이스나 CMS 없이, Git 기반으로 포스트를 관리하여 단순성과 유지보수성을 극대화합니다.

# Core Features  
## MDX 기반 콘텐츠 관리 (MDX-based Content Management)
- What it does: posts/ 폴더 내에 폴더 단위로 MDX 파일을 작성하여 블로그 게시물을 관리합니다. 각 index.mdx 파일 상단의 YAML Frontmatter를 통해 제목, 날짜, 태그, 카테고리 등의 메타데이터를 정의합니다.
- Why it's important: 개발자에게 익숙한 마크다운 문법과 코드 중심의 버전 관리(Git)를 통해 콘텐츠 작성 및 관리가 매우 효율적입니다. 또한, React 컴포넌트를 마크다운 내부에 직접 사용할 수 있어 동적인 콘텐츠 표현이 가능합니다.
- How it works: 빌드 시점에 모든 index.mdx 파일을 파싱하여 메타데이터를 추출하고, 이를 기반으로 게시물 목록을 위한 JSON 파일과 각 게시물의 상세 페이지를 정적으로 생성합니다.

## 게시물 목록 및 탐색 (Post Listing & Navigation)
- What it does: 블로그의 메인 페이지에서 모든 게시물을 최신순으로 정렬하여 보여줍니다. 사용자가 스크롤을 내리면 추가 게시물을 동적으로 로드(Infinite Scroll)합니다. 태그, 작성일(연/월/일)을 기준으로 게시물을 필터링하는 기능을 제공합니다.
- Why it's important: 사용자가 방대한 양의 콘텐츠 속에서도 원하는 정보를 쉽고 빠르게 찾을 수 있도록 돕습니다. 직관적인 탐색 기능은 사용자 경험을 크게 향상시킵니다.
- How it works: 빌드 시 생성된 메타데이터 JSON 파일을 활용하여 클라이언트 측에서 필터링 및 정렬 로직을 수행합니다. 필터링 조건은 URL 쿼리 스트링(?tags=, ?date=)으로 관리되어 링크 공유 시에도 필터 상태가 유지됩니다.

## 게시물 상세 페이지 (Post Detail Page)
- What it does: MDX 파일의 본문을 HTML로 변환하여 렌더링합니다. 코드 블록에는 구문 강조(Syntax Highlighting)를 적용하여 가독성을 높입니다.
- Why it's important: 콘텐츠의 핵심인 블로그 글을 독자가 편안하게 읽을 수 있는 환경을 제공합니다. 특히 개발 블로그에서 코드의 가독성은 매우 중요합니다.
- How it works: 빌드 시점에 각 post/[key] 경로에 대한 정적 페이지를 생성합니다. MDX 파서가 마크다운을 HTML로 변환하고, Prism.js 라이브러리로 코드 블록 스타일을 적용합니다.

## 클라이언트 측 검색 (Client-Side Search)
- What it does: 헤더의 검색창을 통해 키워드로 게시물을 검색하는 기능을 제공합니다.
- Why it's important: 사용자가 특정 키워드를 통해 원하는 정보를 즉시 찾을 수 있게 하여 블로그의 사용성을 높입니다.
- How it works: 빌드 시점에 Lunr.js를 사용하여 모든 게시물의 텍스트 콘텐츠(제목, 요약, 태그 등)에 대한 검색 인덱스 파일을 생성합니다. 사용자가 검색을 실행하면, 클라이언트는 이 인덱스 파일을 로드하여 빠르고 효율적으로 검색 결과를 반환합니다.

# User Experience  
## User Personas:
- Author (개발자 본인): Git과 마크다운을 사용해 쉽고 빠르게 기술 문서를 작성하고 게시하길 원함.
- Reader (방문자): 특정 개발 지식을 얻기 위해 방문한 개발자. 빠르고 쾌적한 환경에서 원하는 정보를 정확하게 탐색하길 원함.

## Key User Flows:
- 게시물 탐색: 메인 페이지 접속 → 전체 글 목록 확인 (무한 스크롤) → 필터(태그/날짜) 기능으로 글 목록 정제 → 관심 있는 글 클릭하여 상세 페이지로 이동.
- 카테고리별 탐색: 사이드 메뉴(PC) 또는 햄버거 메뉴(모바일)에서 카테고리 선택 → 해당 카테고리 글 목록 확인 → 필터 기능으로 글 목록 정제 → 상세 페이지로 이동.

## UI/UX Considerations:
- Minimalism & Readability: 콘텐츠에 집중할 수 있는 깔끔하고 미니멀한 디자인.
- Performance: SSG를 통한 즉각적인 페이지 로딩으로 최상의 성능을 보장.
- Responsive Design: 데스크톱, 태블릿, 모바일 등 모든 디바이스에서 일관되고 최적화된 사용자 경험을 제공.
- Dark/Light Mode: 사용자의 시스템 설정을 기본으로 따르며, 수동으로 테마를 전환할 수 있는 토글 버튼을 제공.

# Technical Architecture
## System Components:
- Framework: Next.js (with TypeScript)
- Styling: Tailwind CSS
- UI Components: shadcn/ui
- Content Parsing: @next/mdx, gray-matter
- Client-Side Search: Lunr.js
- Testing: Jest, React Testing Library

## Data Models:
- MDX Frontmatter (Metadata):
```
---
key: string       # Unique identifier (folder name)
title: string     # Post title
date: string      # Publication date (YYYY-MM-DD)
tags: string[]    # Array of tags
category: string  # Post category
summary: string   # Short summary of the post
---
```
- Build-time Generated posts.json:
```
{
  "[categoryName]": [
    {
      "key": "...",
      "title": "...",
      "date": "...",
      "tags": ["..."],
      "category": "...",
      "summary": "..."
    }
  ]
}
```

## APIs and Integrations
- Build-Time Data Pipeline: Node.js 스크립트를 사용하여 posts/ 디렉토리를 순회. 각 MDX 파일에서 메타데이터를 추출하여 posts.json과 lunr-index.json을 생성.
- SEO & Syndication: 빌드 프로세스에 sitemap.xml과 rss.xml 파일 생성을 포함하여 검색 엔진 최적화 및 RSS 피드 기능을 지원.
- Dynamic Head/OG Tags: 상세 페이지(post/[key]) 렌더링 시, 해당 글의 메타데이터를 기반으로 <title>, <meta name="description">, Open Graph 태그 (og:title, og:description, og:image 등)를 동적으로 생성.

## Infrastructure Requirements:
Deployment: Next.js 정적 사이트 배포를 지원하는 플랫폼 Vercel 사용
CI/CD: main 브랜치에 push 또는 merge 시 자동으로 테스트, 빌드, 배포를 실행하는 워크플로우

# Development Roadmap
## Phase 1: MVP (Minimum Viable Product) - The Core Blog
1. MDX Content Rendering: MDX 파일을 읽어 기본 스타일의 HTML 페이지(post/[key])로 렌더링하는 기능 구현.
2. Homepage Post List: 빌드 시 모든 포스트의 메타데이터를 읽어, 메인 페이지(/)에 제목과 날짜만 있는 간단한 목록을 최신순으로 표시.

## Phase 2: Core Features & Usability
1. Metadata-driven Listing: posts.json 생성 로직을 구현하고, 이를 바탕으로 메인 페이지 목록을 제목, 요약, 날짜, 태그가 포함된 형태로 개선. 썸네일 로직 적용.
2. Category System: 카테고리별 필터링 기능(?category=...) 및 반응형 사이드/드로어 메뉴 구현.
3. Advanced Filtering: 태그(다중 선택) 및 날짜 기반 필터링 기능 추가.
4. UI Polish: 다크/라이트 모드 기능 구현 및 전반적인 UI 디자인(shadcn/ui, Tailwind CSS) 적용.

## Phase 3: Advanced Functionality & Production Readiness
1. Search Implementation: Lunr.js 검색 인덱스 생성 스크립트 작성 및 검색 UI/로직 구현.
2. SEO & Syndication: sitemap.xml, rss.xml 생성 로직 구현. Open Graph 태그 동적 생성 고도화.

# Logical Dependency Chain
1. Foundation (Must-have first): MDX 파일 파싱 및 post/[key] 상세 페이지 렌더링 기능이 최우선. 이것이 없으면 블로그의 본질인 '글'이 존재할 수 없다.
2. Visibility (Making it usable): 모든 글의 메타데이터를 집계하여 메인 페이지에 목록으로 보여주는 기능. 이것이 구현되어야 사용자가 작성된 글들을 발견할 수 있다.
3. Navigability (Building upon the foundation): 목록 기능이 완성된 후, 집계된 메타데이터를 활용하여 카테고리 및 필터 기능을 추가. 이는 기존 목록 기능에 의존한다.
4. Discoverability (Independent enhancement): 검색 기능은 메타데이터 집계에 의존하지만, 필터링 기능과는 독립적으로 개발될 수 있다.
5. Polish & Optimization (Layered on top): UI 개선(다크모드), SEO, 자동화된 테스트는 핵심 기능이 동작하는 어느 시점에서든 추가하거나 개선할 수 있는 독립적인 레이어다.

# Risks and Mitigations
- Risk: 빌드 시 처리할 작업(MDX 파싱, JSON 생성, 검색 인덱싱)이 많아지면서 빌드 시간이 길어질 수 있음.
   - Mitigation: 빌드 스크립트를 효율적으로 작성하고, 변경된 파일만 처리하는 캐싱 전략을 도입하여 증분 빌드(Incremental Builds)를 최대한 활용.
- Risk: MVP 범위 설정 실패로 초기 개발 기간이 길어지는 것.
   - Mitigation: 위 Development Roadmap에서 정의한 Phase 1(MVP)에 집중. 핵심 기능(글 작성 및 목록 보기)을 먼저 완성하고, 이후 기능을 점진적으로 추가하는 전략을 엄격히 준수.
- Risk: 개인 프로젝트로서 개발 리소스(시간)가 제한적임.
   - Mitigation: UI 개발 시간을 단축하기 위해 shadcn/ui와 같은 기성 컴포넌트 라이브러리를 적극 활용. 복잡한 커스텀 기능보다는 핵심 기능의 안정성에 집중.

# Appendix
## Testing Strategy:
- Methodology: TDD (Test-Driven Development) 접근법을 지향하여 '실패하는 테스트 작성 → 통과하는 코드 작성 → 리팩토링' 사이클을 따름.
- Tools: Jest로 유틸리티 함수 및 빌드 스크립트를 테스트하고, React Testing Library로 컴포넌트의 렌더링과 상호작용을 테스트.
- Goal: 전체 코드 커버리지 80% 이상을 목표로 하여 코드의 신뢰성 확보.
- Automation: GitHub Actions를 통해 Pull Request 생성 시 자동으로 테스트를 실행하여 안정성을 유지.